{"version":3,"sources":["./src/app/pages/approve-course/approve.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACkB;AACb;AACG;AACW;;;AAEvD,MAAM,GAAG,GAAG,GAAG,qEAAW,CAAC,QAAQ,EAAE,CAAC;AAC7C,MAAM,WAAW,GAAG;IAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;KACnC,CAAC;CAEH,CAAC;AAIK,MAAM,cAAc;IAEzB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IAExC,UAAU,CAAC,MAAc,EAAC,IAAY,EAAC,QAAa;QAClD,IAAI,IAAI,GAAU,GAAG,GAAG,eAAe,CAAC;QAExC,IAAG,MAAM,EAAC;YACR,IAAI,GAAG,GAAG,IAAI,WAAW,MAAM,EAAE;SAClC;QACD,IAAG,IAAI,EAAC;YACN,IAAG,MAAM,EAAC;gBACR,IAAI,GAAG,GAAG,IAAI,SAAS,IAAI,EAAE;aAE9B;iBACG;gBACF,IAAI,GAAG,GAAG,IAAI,SAAS,IAAI,EAAE;aAE9B;SACF;QACD,IAAG,QAAQ,EAAC;YACV,IAAG,MAAM,IAAI,IAAI,EAAC;gBAChB,IAAI,GAAG,GAAG,IAAI,aAAa,QAAQ,EAAE;aAEtC;iBACG;gBACJ,IAAI,GAAG,GAAG,IAAI,aAAa,QAAQ,EAAE;aAEpC;SACF;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;aACvB,IAAI,CAAC,iEAAU,CAAC,WAAW,CAAM,cAAc,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IACD,YAAY,CAAC,IAAI;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,EAAC,IAAI,CAAC;aAC/C,IAAI,CAAC,iEAAU,CAAC,WAAW,CAAM,eAAe,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,0BAA0B,CAAC;aACnD,IAAI,CAAC,iEAAU,CAAC,WAAW,CAAM,UAAU,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;;4EAxCU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;AA2CD,SAAS,WAAW,CAAI,SAAS,GAAG,WAAW,EAAE,MAAU;IACzD,OAAO,CAAC,KAAU,EAAiB,EAAE;QAEnC,wDAAwD;QACxD,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAyB;QAE/C,8DAA8D;QAC9D,gEAAgE;QAEhE,OAAO,uDAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC;AACJ,CAAC","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport {environment} from \"../../../environments/environment\";\n\nexport const API = `${environment.API_BASE}`;\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  // withCredentials: true\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApproveService {\n\n  constructor(private http:HttpClient) { }\n\n  courseList(status?:string,name?:string,category?:any){\n    let _url:string = `${API}/vredu/course`;\n\n    if(status){\n      _url = `${_url}?status=${status}`\n    }\n    if(name){\n      if(status){\n        _url = `${_url}&name=${name}`\n\n      }\n      else{\n        _url = `${_url}?name=${name}`\n\n      }\n    }\n    if(category){\n      if(status || name){\n        _url = `${_url}&category=${category}`\n\n      }\n      else{\n      _url = `${_url}?category=${category}`\n\n      }\n    }\n    return this.http.get(_url)\n      .pipe(catchError(handleError<any>('list courses')));\n  }\n  updateCourse(data){\n    return this.http.put(`${API}/vredu/course`,data)\n    .pipe(catchError(handleError<any>('Update course')));\n  }\n  categoryList(){\n    return this.http.get(`${API}/vredu/course/categories`)\n      .pipe(catchError(handleError<any>('category')));\n  }\n}\nfunction handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    // UtilitesService.log(`${operation} failed: ${error.message}`);\n\n    return throwError(error.error);\n  };\n}\n"],"sourceRoot":"webpack:///"}